/*
    렌더링은 그릴 물체의 정보를 하드웨어인 그래픽카드 GPU에 넘겨
    GPU가 처리하도록 위임하는 것이 일반적이다.

    CPU는 그릴 믈체의 정보를 하드웨어에 설정된 워크플로우를 통해 렌더링을 진행하고 결과를 띄운다
    이 CPU 내부의 워크플로우를 렌더링 파이프라인이라고 한다.

    이 과정은 복잡한데 학습을 위해 렌더링 작업을 위임하지 않고 직접 구현한다면

    정점 변환 -> 정점 처리 -> 픽셀화 -> 픽셀 처리

    와 같이 4단계로 단순화 시켜 구성할 수있다.

    1. 정점 변환 :
        오브젝트에 연결된 메시가 가지고 있는 모든 정점의 정보를 변환하는 과정
        메시에 설정된 정점의 데이터는 로컬 공간을 기준으로 설정되어 있지만
        다양한 오브젝트들이 월드 공간을 중심으로 그려지기 위해선 정점의 최종 위치가
        월드 공간을 중심으로 지정되어야 한다.
        (ex: DrawMesh2D 함수 등)

    2. 정점 처리 단계 :
        화면에 그려질 정점의 최종 위치 값을 구하는 과정
        모델링 행렬에 로컬 공간의 좌표를 곱하면 월드 공간을 기준으로 좌표가 변환된다.
        (ex: VetexShader2D 함수 등)

    3. 픽셀화 단계 :
        메시를 구성하는 삼각형마다 픽셀화를 진행하는 과정
        무게중심좌표를 활용해 각 삼각형 영역에 속하는 픽셀들을 추려내고
        이들의 색상을 결정한다.
        (ex: DrawTriangle2D 함수 등)
    
    4. 픽셀 처리 :
        삼각형을 구성하는 각 픽셀의 최종 색상을 구하는 과정
        텍스처로부터 해당 픽셀의 UV에 대응되는 색상을 가져온 후에 필요하다면
        추가로 조명 효과 등을 적요해 최종 픽셀의 색상을 설정한다.
        (ex: FragmentShader2D 함수 등)

    GPU는 렌더링 파이프라인을 구성하는 대부분의 과정을 고정시키고 특화된 
    하드웨어 칩을 사용해 계산하지만 몇몇 중요한 과정은 개발자들이 설계한 로직을
    실행하도록 함수를 제공하는데 이것을 셰이더(Shader)라불린다.

    정점 처리 단계에서는 개발자들이 변환을 직접 설계하도록 함수를 제공하는데
    이것은 Vertex Shader, 정점 셰이더라고 한다.

    GRU에선 삼각형을 구성하는 픽셀을 파편(Fragment)라고 부르며 개발잗르이 직접
    최종 픽셀의 색상의 계산할 수 있도록 별도의 함수를 제공하는데, 이를
    파편 셰이더(Fragment shader) e또는 픽셀셰이더(Pixel Shader)라고 한다.
*/